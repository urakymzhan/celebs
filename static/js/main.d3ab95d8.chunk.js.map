{"version":3,"sources":["secret.js","components/CelebsList.js","components/PaginationContainer.js","App.js","serviceWorker.js","index.js"],"names":["api_key","base_url","profile_sizes","customStyles","content","background","zIndex","button","color","CelebsList","celebrity","showModal","handleOpenModal","handleCloseModal","modalContentData","console","log","Fragment","key","id","name","popularity","src","profile_path","alt","known_for","map","movie","onClick","title","isOpen","contentLabel","style","class","original_title","overview","poster_path","release_date","vote_average","vote_count","PaginationContainer","props","activePage","itemsCountPerPage","totalItemsCount","onChange","limit","leftLimit","className","pageRangeDisplayed","fetchJson","main_api","fetch","then","res","json","celebsData","catch","err","App","handlePageChange","pageNumber","state","length","result","setState","results","total_pages","total_results","isLoading","handleSearchChange","e","target","value","searchText","handleSearchClick","search_api","this","page","type","placeholder","React","Component","Boolean","window","location","hostname","match","require","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qSAAaA,EAAU,mCACVC,EAAW,6BACXC,EAAgB,CAAC,MAAO,OAAQ,OAAQ,YCE/CC,EAAe,CACnBC,QAAS,CACPC,WAAY,OACZC,OAAQ,GAEVC,OAAQ,CACNC,MAAO,UAII,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,UACAC,EAIC,EAJDA,UACAC,EAGC,EAHDA,gBACAC,EAEC,EAFDA,iBACAC,EACC,EADDA,iBAGA,OADAC,QAAQC,IAAI,mBAAoBF,GAE9B,kBAAC,IAAMG,SAAP,KACE,wBAAIC,IAAKR,EAAUS,IACjB,4BAAKT,EAAUU,MACf,4BAAKV,EAAUW,YACf,4BACE,yBACEC,IAAG,UAAKrB,GAAL,OAAgBC,EAAc,IAA9B,OAAmCQ,EAAUa,cAChDC,IAAI,sBAGR,4BACGd,EAAUe,UAAUC,KAAI,SAACC,GACxB,OACE,uBACET,IAAKS,EAAMR,GACXS,QAAS,kBAAMhB,EAAgBe,IAC/BR,GAAG,oBAEFQ,EAAME,UAIb,kBAAC,IAAD,CACEC,OAAQnB,EACRoB,aAAa,oBACbC,MAAO7B,GAEP,4BAAQyB,QAASf,EAAkBM,GAAG,iBAAtC,KAGA,yBAAKc,MAAM,gBACT,wBAAId,GAAG,eAAeL,EAAiBoB,gBACvC,uBAAGf,GAAG,qBAAqBL,EAAiBqB,UAE5C,uBAAGhB,GAAG,gBACJ,yBACEG,IAAG,UAAKrB,GAAL,OAAgBC,EAAc,IAA9B,OAAmCY,EAAiBsB,aACvDZ,IAAI,kBAGR,uBAAGL,GAAG,kBAAN,iBACgB,8BAAOL,EAAiBuB,eAExC,uBAAGlB,GAAG,cACH,IADH,iBAEgB,8BAAOL,EAAiBwB,eAExC,uBAAGnB,GAAG,oBAAN,eACc,8BAAOL,EAAiByB,kB,qBCpErC,SAASC,EAAoBC,GAAQ,IAEhDC,EAMED,EANFC,WACAC,EAKEF,EALFE,kBACAC,EAIEH,EAJFG,gBACAC,EAGEJ,EAHFI,SACAC,EAEEL,EAFFK,MACAC,EACEN,EADFM,UAGF,OACE,yBAAKC,UAAU,wBACb,kBAAC,IAAD,CACEN,WAAYA,EACZC,kBAAmBA,EACnBC,gBAAiBA,GAAoC,EACrDK,mBAAoB,EACpBJ,SAAUA,IAEZ,wCACWE,EADX,MACyBD,EADzB,OACoCF,GAAoC,ICjB9E,IAAMM,EAAY,SAACR,GACjB,IAAMS,EAAQ,8DAA0DnD,EAA1D,gCAAyF0C,GACvG,OACEU,MAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAgBA,KAErBC,OAAM,SAACC,GAAD,OAAS3C,QAAQC,IAAI0C,OA0KnBC,E,kDArKb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IA8BRmB,iBAAmB,SAACC,GAClB,IAAMf,EAAQe,EAAa,EAAKC,MAAMN,WAAWO,OAC3ChB,GAAac,EAAa,GAAK,EAAKC,MAAMN,WAAWO,OAE3Db,EAAUW,GAAYR,MAAK,SAACW,GAC1B,EAAKC,SAAS,CACZT,WAAYQ,EAAOE,QACnBC,YAAaH,EAAOG,YACpBC,cAAeJ,EAAOI,cACtB1B,WAAYmB,EACZQ,WAAW,EACXvB,MAAOA,EACPC,UAAWA,QA3CE,EAgDnBuB,mBAAqB,SAACC,GAEG,KAAnBA,EAAEC,OAAOC,OACX,EAAKR,SAAS,CAAES,WAAYH,EAAEC,OAAOC,SAnDtB,EAsDnBE,kBAAoB,SAACJ,GAAO,IAAD,EACU,EAAKT,MAAhCpB,EADiB,EACjBA,WAAYgC,EADK,EACLA,WACdE,EAAU,6DAAyD5E,EAAzD,iCAAyF0E,EAAzF,iBAA4GhC,EAA5G,wBAEG,KAAfgC,GACFtB,MAAMwB,GACHvB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACW,GAAD,OACJ,EAAKC,SAAS,CACZT,WAAYQ,EAAOE,QACnBC,YAAaH,EAAOG,YACpBC,cAAeJ,EAAOI,cACtBC,WAAW,OAGdZ,OAAM,SAACC,GAAD,OAAS3C,QAAQC,IAAI0C,OArEf,EAyEnB9C,gBAAkB,SAACe,GACjB,EAAKsC,SAAS,CAAEtD,WAAW,EAAMG,iBAAkBa,KA1ElC,EA6EnBd,iBAAmB,WACjB,EAAKoD,SAAS,CAAEtD,WAAW,KA3E3B,EAAKmD,MAAQ,CACXN,WAAY,GACZd,WAAY,EACZyB,YAAa,EACbC,cAAe,EACfC,WAAW,EACXvB,MAAO,GACPC,UAAW,EACX2B,WAAY,GAEZ/D,WAAW,EACXG,iBAAkB,IAdH,E,gEAkBE,IAAD,OACV4B,EAAemC,KAAKf,MAApBpB,WACRQ,EAAUR,GAAYW,MAAK,SAACW,GAC1B,EAAKC,SAAS,CACZT,WAAYQ,EAAOE,QACnBxB,WAAYsB,EAAOc,KACnBX,YAAaH,EAAOG,YACpBC,cAAeJ,EAAOI,cACtBC,WAAW,S,+BAuDP,IAAD,SACkCQ,KAAKf,MAAtCN,EADD,EACCA,WAAY1C,EADb,EACaA,iBADb,EASH+D,KAAKf,MANPpB,EAHK,EAGLA,WACA0B,EAJK,EAILA,cACAC,EALK,EAKLA,UACAvB,EANK,EAMLA,MACAC,EAPK,EAOLA,UACApC,EARK,EAQLA,UAGEqD,EACF,4BACE,0CACA,0CACA,0CACA,2CA2BJ,OAxBKK,GAAmC,IAAtBb,EAAWO,SAC3BC,EACE,4BACE,yCACA,yCACA,yCACA,4CAIDK,GAAab,GAAcA,EAAWO,OAAS,IAClDC,EAASR,EAAW9B,KAAI,SAAChB,GACvB,OACE,kBAACD,EAAD,CACEC,UAAWA,EACXC,UAAWA,EACXC,gBAAiB,EAAKA,gBACtBC,iBAAkB,EAAKA,iBACvBC,iBAAkBA,QAK1BC,QAAQC,IAAI,aAAcwC,GAExB,yBAAKR,UAAU,OACb,yBAAKA,UAAU,oBACb,2BACE+B,KAAK,QACLC,YAAY,wBACZ7D,GAAG,SACH0B,SAAUgC,KAAKP,qBAEjB,2BACES,KAAK,SACLN,MAAM,SACNtD,GAAG,YACHS,QAASiD,KAAKF,qBAIlB,+BACE,+BACE,4BACE,yCACA,0CACA,uCACA,2CAGJ,+BAAQX,IAEV,kBAACxB,EAAD,CACEE,WAAYA,EACZC,kBAAmBa,EAAWO,OAC9BnB,gBAAiBwB,EACjBvB,SAAUgC,KAAKjB,iBACfd,MAAOA,EACPC,UAAWA,S,GA/JHkC,IAAMC,WCLJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,EAAQ,IAERC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdzC,OAAM,SAAA0C,GACLpF,QAAQoF,MAAMA,EAAMC,c","file":"static/js/main.d3ab95d8.chunk.js","sourcesContent":["export const api_key = 'df8b08ecb436696fee41a00f8d87a540';\nexport const base_url = 'http://image.tmdb.org/t/p/';\nexport const profile_sizes = ['w45', 'w185', 'h632', 'original'];\n","import React from 'react';\nimport ReactModal from 'react-modal';\nimport { base_url, profile_sizes } from '../secret';\n\nconst customStyles = {\n  content: {\n    background: '#333',\n    zIndex: 9,\n  },\n  button: {\n    color: 'black',\n  },\n};\n\nexport default function CelebsList({\n  celebrity,\n  showModal,\n  handleOpenModal,\n  handleCloseModal,\n  modalContentData,\n}) {\n  console.log('modalContentData', modalContentData);\n  return (\n    <React.Fragment>\n      <tr key={celebrity.id}>\n        <td>{celebrity.name}</td>\n        <td>{celebrity.popularity}</td>\n        <td>\n          <img\n            src={`${base_url}${profile_sizes[0]}${celebrity.profile_path}`}\n            alt=\"celebrity avatar\"\n          />\n        </td>\n        <td>\n          {celebrity.known_for.map((movie) => {\n            return (\n              <p\n                key={movie.id}\n                onClick={() => handleOpenModal(movie)}\n                id=\"open-movie-title\"\n              >\n                {movie.title}\n              </p>\n            );\n          })}\n          <ReactModal\n            isOpen={showModal}\n            contentLabel=\"Movie Information\"\n            style={customStyles}\n          >\n            <button onClick={handleCloseModal} id=\"modalCloseBtn\">\n              X\n            </button>\n            <div class=\"modalContent\">\n              <h1 id=\"movie-title\">{modalContentData.original_title}</h1>\n              <p id=\"movie-description\">{modalContentData.overview}</p>\n\n              <p id=\"movie-poster\">\n                <img\n                  src={`${base_url}${profile_sizes[1]}${modalContentData.poster_path}`}\n                  alt=\"movie avatar\"\n                />\n              </p>\n              <p id=\"movie-rel-date\">\n                Release Date: <span>{modalContentData.release_date}</span>\n              </p>\n              <p id=\"movie-vote\">\n                {' '}\n                Average Vote: <span>{modalContentData.vote_average}</span>\n              </p>\n              <p id=\"movie-view-count\">\n                Vote Count: <span>{modalContentData.vote_count}</span>\n              </p>\n            </div>\n          </ReactModal>\n        </td>\n      </tr>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Pagination from 'react-js-pagination';\n\nexport default function PaginationContainer(props) {\n  const {\n    activePage,\n    itemsCountPerPage,\n    totalItemsCount,\n    onChange,\n    limit,\n    leftLimit,\n  } = props;\n\n  return (\n    <div className=\"pagination-container\">\n      <Pagination\n        activePage={activePage}\n        itemsCountPerPage={itemsCountPerPage}\n        totalItemsCount={totalItemsCount ? totalItemsCount : 0}\n        pageRangeDisplayed={5}\n        onChange={onChange}\n      />\n      <div>\n        Showing {leftLimit} - {limit} of {totalItemsCount ? totalItemsCount : 0}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport CelebsList from './components/CelebsList';\nimport PaginationContainer from './components/PaginationContainer';\nimport { api_key } from './secret';\n\nconst fetchJson = (activePage) => {\n  const main_api = `https://api.themoviedb.org/3/person/popular?api_key=${api_key}&language=en-US&page=${activePage}`;\n  return (\n    fetch(main_api)\n      .then((res) => res.json())\n      .then((celebsData) => celebsData)\n      // ideally show api error on browser\n      .catch((err) => console.log(err))\n  );\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      celebsData: [],\n      activePage: 1,\n      total_pages: 0,\n      total_results: 0,\n      isLoading: true,\n      limit: 20,\n      leftLimit: 0,\n      searchText: '',\n\n      showModal: false,\n      modalContentData: [],\n    };\n  }\n\n  componentDidMount() {\n    const { activePage } = this.state;\n    fetchJson(activePage).then((result) => {\n      this.setState({\n        celebsData: result.results,\n        activePage: result.page,\n        total_pages: result.total_pages,\n        total_results: result.total_results,\n        isLoading: false,\n      });\n    });\n  }\n\n  handlePageChange = (pageNumber) => {\n    const limit = pageNumber * this.state.celebsData.length;\n    const leftLimit = (pageNumber - 1) * this.state.celebsData.length;\n\n    fetchJson(pageNumber).then((result) => {\n      this.setState({\n        celebsData: result.results,\n        total_pages: result.total_pages,\n        total_results: result.total_results,\n        activePage: pageNumber,\n        isLoading: false,\n        limit: limit,\n        leftLimit: leftLimit,\n      });\n    });\n  };\n\n  handleSearchChange = (e) => {\n    // use better validation maybe\n    if (e.target.value !== '') {\n      this.setState({ searchText: e.target.value });\n    }\n  };\n  handleSearchClick = (e) => {\n    const { activePage, searchText } = this.state;\n    const search_api = `https://api.themoviedb.org/3/search/person?api_key=${api_key}&language=en-US&query=${searchText}&page=${activePage}&include_adult=false`;\n    // use better validation maybe\n    if (searchText !== '') {\n      fetch(search_api)\n        .then((res) => res.json())\n        .then((result) =>\n          this.setState({\n            celebsData: result.results,\n            total_pages: result.total_pages,\n            total_results: result.total_results,\n            isLoading: false,\n          })\n        )\n        .catch((err) => console.log(err));\n    }\n  };\n\n  handleOpenModal = (movie) => {\n    this.setState({ showModal: true, modalContentData: movie });\n  };\n\n  handleCloseModal = () => {\n    this.setState({ showModal: false });\n  };\n\n  render() {\n    const { celebsData, modalContentData } = this.state;\n    const {\n      activePage,\n      total_results,\n      isLoading,\n      limit,\n      leftLimit,\n      showModal,\n    } = this.state;\n\n    let result = (\n      <tr>\n        <td>Loading...</td>\n        <td>Loading...</td>\n        <td>Loading...</td>\n        <td>Loading...</td>\n      </tr>\n    );\n    if (!isLoading && celebsData.length === 0) {\n      result = (\n        <tr>\n          <td>No result</td>\n          <td>No result</td>\n          <td>No result</td>\n          <td>No result</td>\n        </tr>\n      );\n    }\n    if (!isLoading && celebsData && celebsData.length > 0) {\n      result = celebsData.map((celebrity) => {\n        return (\n          <CelebsList\n            celebrity={celebrity}\n            showModal={showModal}\n            handleOpenModal={this.handleOpenModal}\n            handleCloseModal={this.handleCloseModal}\n            modalContentData={modalContentData}\n          />\n        );\n      });\n    }\n    console.log('celebsData', celebsData);\n    return (\n      <div className=\"App\">\n        <div className=\"search-container\">\n          <input\n            type=\"input\"\n            placeholder=\"Search by artist name\"\n            id=\"search\"\n            onChange={this.handleSearchChange}\n          />\n          <input\n            type=\"button\"\n            value=\"Search\"\n            id=\"searchBtn\"\n            onClick={this.handleSearchClick}\n          />\n        </div>\n\n        <table>\n          <thead>\n            <tr>\n              <th>Full Name</th>\n              <th>Popularity</th>\n              <th>Profile</th>\n              <th>Known For</th>\n            </tr>\n          </thead>\n          <tbody>{result}</tbody>\n        </table>\n        <PaginationContainer\n          activePage={activePage}\n          itemsCountPerPage={celebsData.length}\n          totalItemsCount={total_results}\n          onChange={this.handlePageChange}\n          limit={limit}\n          leftLimit={leftLimit}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('bootstrap/less/bootstrap.less');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}